}
}
}
templhs <- h%*%t(h)
temprhs2 <- h%*%t(A)
w2t <- solve(templhs)%*%temprhs2
w2 <- t(w2t)
for(i in 1:dim(w2)[1]){
for(j in 1:dim(w2)[2]){
if(w2[i,j] < 0){
w2[i,j] = 0
}
}
}
test2 <- 0.5*((A-w2%*%h)^2)
if(sum(test2) < tempsum){
tempsum <- sum(test2)
seednum <- i
return(c(tempsum, seednum))
}
}
}
als(5,4,3,6)
tempsum = sum(testy)
m
n
k
maxx
for(i in 1:500){
set.seed(i)
w = matrix(runif(m*k,0,1), nrow = m)
tempw <- t(w)%*%w
temprhs <- t(w)%*%A
h = solve(tempw)%*%temprhs
for(i in 1:dim(h)[1]){
for(j in 1:dim(h)[2]){
if(h[i,j] < 0){
h[i,j] = 0
}
}
}
templhs <- h%*%t(h)
temprhs2 <- h%*%t(A)
w2t <- solve(templhs)%*%temprhs2
w2 <- t(w2t)
for(i in 1:dim(w2)[1]){
for(j in 1:dim(w2)[2]){
if(w2[i,j] < 0){
w2[i,j] = 0
}
}
}
test2 <- 0.5*((A-w2%*%h)^2)
if(sum(test2) < tempsum){
tempsum <- sum(test2)
seednum <- i
return(c(tempsum, seednum))
}
for(i in 1:500){
set.seed(i)
w = matrix(runif(m*k,0,1), nrow = m)
tempw <- t(w)%*%w
temprhs <- t(w)%*%A
h = solve(tempw)%*%temprhs
for(i in 1:dim(h)[1]){
for(j in 1:dim(h)[2]){
if(h[i,j] < 0){
h[i,j] = 0
}
}
}
templhs <- h%*%t(h)
temprhs2 <- h%*%t(A)
w2t <- solve(templhs)%*%temprhs2
w2 <- t(w2t)
for(i in 1:dim(w2)[1]){
for(j in 1:dim(w2)[2]){
if(w2[i,j] < 0){
w2[i,j] = 0
}
}
}
test2 <- 0.5*((A-w2%*%h)^2)
if(sum(test2) < tempsum){
tempsum <- sum(test2)
seednum <- i
return(c(tempsum, seednum))
}
}
set.seed(1)
w
}
A = matrix(runif(m*n, 0, maxx), nrow = m)
testy = matrix(rep(maxx + 1, m*n), nrow = m)
tempsum = sum(testy)
seednum = 501
for(i in 1:500){
set.seed(i)
w = matrix(runif(m*k,0,1), nrow = m)
tempw <- t(w)%*%w
temprhs <- t(w)%*%A
h = solve(tempw)%*%temprhs
for(i in 1:dim(h)[1]){
for(j in 1:dim(h)[2]){
if(h[i,j] < 0){
h[i,j] = 0
}
}
}
templhs <- h%*%t(h)
temprhs2 <- h%*%t(A)
w2t <- solve(templhs)%*%temprhs2
w2 <- t(w2t)
for(i in 1:dim(w2)[1]){
for(j in 1:dim(w2)[2]){
if(w2[i,j] < 0){
w2[i,j] = 0
}
}
}
test2 <- 0.5*((A-w2%*%h)^2)
if(sum(test2) < tempsum){
tempsum <- sum(test2)
seednum <- i
return(c(tempsum, seednum))
}
}
testy = matrix(rep(maxx + 1, m*n), nrow = m)
testy
A
tempsum = sum(testy)
seednum = 501
w = matrix(runif(m*k,0,1), nrow = m)
tempw <- t(w)%*%w
temprhs <- t(w)%*%A
h = solve(tempw)%*%temprhs
h
w
tempw
temprhs
h = solve(tempw)%*%temprhs
h
w
h
templhs <- h%*%t(h)
temprhs2 <- h%*%t(A)
templhs
m=4
n=5
k=3
maxx=6
A = matrix(runif(m*n, 0, maxx), nrow = m)
testy = matrix(rep(maxx + 1, m*n), nrow = m)
tempsum = sum(testy)
seednum = 501
set.seed(1)
w = matrix(runif(m*k,0,1), nrow = m)
tempw <- t(w)%*%w
temprhs <- t(w)%*%A
det(tempw)
h = solve(tempw)%*%temprhs
w
set.seed(2)
w = matrix(runif(m*k,0,1), nrow = m)
w
set.seed(1)
w = matrix(runif(m*k,0,1), nrow = m)
w
for(i in 1:10){
set.seed(i)
w = matrix(runif(m*k,0,1), nrow = m)
tempw <- t(w)%*%w
print(det(tempw))
}
for(i in 1:100){
set.seed(i)
w = matrix(runif(m*k,0,1), nrow = m)
tempw <- t(w)%*%w
print(det(tempw))
}
als <- function(m,n,k,maxx){
if(k > m | k > n){
stop("non-valid dimensions")
}
if(k < 0 |m < 0|n < 0|maxx<0){
stop("non-valid dimensions")
}
testy = matrix(rep(maxx + 1, m*n), nrow = m)
tempsum = sum(testy)
seednum = 501
for(k in 1:500){
set.seed(k)
w = matrix(runif(m*k,0,1), nrow = m)
tempw <- t(w)%*%w
temprhs <- t(w)%*%A
h = solve(tempw)%*%temprhs
for(i in 1:dim(h)[1]){
for(j in 1:dim(h)[2]){
if(h[i,j] < 0){
h[i,j] = 0
}
}
}
templhs <- h%*%t(h)
temprhs2 <- h%*%t(A)
w2t <- solve(templhs)%*%temprhs2
w2 <- t(w2t)
for(i in 1:dim(w2)[1]){
for(j in 1:dim(w2)[2]){
if(w2[i,j] < 0){
w2[i,j] = 0
}
}
}
test2 <- 0.5*((A-w2%*%h)^2)
if(sum(test2) < tempsum){
tempsum <- sum(test2)
seednum <- k
return(c(tempsum, seednum))
}
}
}
als(5,4,3,6)
temprhs <- t(w)%*%A
als(4,5,3,6)
w
set.seed(1)
w
tempw <- t(w)%*%w
temprhs <- t(w)%*%A
h = solve(tempw)%*%temprhs
h
for(i in 1:dim(h)[1]){
for(j in 1:dim(h)[2]){
if(h[i,j] < 0){
h[i,j] = 0
}
}
}
h
templhs <- h%*%t(h)
temprhs2 <- h%*%t(A)
w2t <- solve(templhs)%*%temprhs2
w2 <- t(w2t)
det(templhs)
A = matrix(c(1,2,3,4), nrow = 2)
B = matrix(c(2,3,4,5), nrow = 2)
A
B
A/B
A*B
A = matrix(c(2,3,4,5,6,7,8,9,10,11,12,13), nrow = 3)
A
dim(A)
dim(A)[1]*dim(A)[2]
testy = matrix(rep(max(A), dim(A)[1]*dim(A)[2]), nrow = dim(A)[1])
tempsum = sum(testy)
seednum = 501
testy
sum(testy)
k = 2
W = matrix(runif(dim(A)[1]*k,0,1), nrow = dim(A)[1])
set.seed(1)
W = matrix(runif(dim(A)[1]*k,0,1), nrow = dim(A)[1])
w
dim(A)[1]
dim(A)[1])
dim(A)[1]
k
dim(A)[1]*k
runif(dim(A)[1]*k,0,1)
w
w = matrix(runif(dim(A)[1]*k,0,1), nrow = dim(A)[1])
w
h = matrix(runif(k*dim(A)[2],0,1), nrow = k)
h
t(w)%*%A
h*(t(w)%*%A)
t(w)%*%w%*%h
t(w)%*%w%*%h + .000000001
(h*(t(w)%*%A))/(t(w)%*%w%*%h + .000000001)
w1 = (w*(A%*%t(h)))/(w%*%h%*%t(h) + .000000001)
w1
test2 <- 0.5*((A-w1%*%h1)^2)
h1 = (h*(t(w)%*%A))/(t(w)%*%w%*%h + .000000001)
w1 = (w*(A%*%t(h)))/(w%*%h%*%t(h) + .000000001)
h1
w1
test2 <- 0.5*((A-w1%*%h1)^2)
test2
w1%*%h1
A
if(sum(test2) < tempsum){
tempsum <- sum(test2)
seednum <- i
return(c(tempsum, seednum))
}
fabaf <- function(bb){
answers8 <- peakfunc(density(bb$DNA_Index)$x, density(bb$DNA_Index)$y)
answers8
interval <- c(0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5)
interval
matrix2 <- rep(0, 10)
z1 <- interval[1:10]
z2 <- interval[2:11]
for (i in answers8){
for (j in 1:10){
if (i > z1[j] & i < z2[j]){
matrix2[j] <- matrix2[j] + 1
}
}
}
matrix2 <- as.data.frame(t(matrix2))
matrix2$V11 <- "c"
matrix2$V11 <- as.factor(matrix2$V11)
matrix2 <- rbind(matrix2, matrix2)
rfProbs <- predict(rfFit, matrix2, type = "prob")
return(rfProbs[1,1]*100)
}
rfFit
shiny::runApp('C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/rforest')
runApp('C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/rforest')
rfFit <- readRDS("data/data.Rda")
dt <- read.csv("data/velocity.csv")
runApp('C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/MotionDetection')
runApp('C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/rforest')
matrix2
setwd("~/GitHub/workingWithYicheng/workingWithYicheng/phase-I-data/rawData/OSCC")
getwd()
matrix3 <- rep(0, 10)
matrix3 <- as.data.frame(matrix3)
newd <- list.files(pattern = ".csv")
for (k in newd){
data <- read.csv(k)
answers8 <- peakfunc(density(data$DNA_Index)$x, density(data$DNA_Index)$y)
answers8
matrix2 <- rep(0, 10)
z1 <- interval[1:10]
z2 <- interval[2:11]
for (i in answers8){
for (j in 1:10){
if (i > z1[j] & i < z2[j]){
matrix2[j] <- matrix2[j] + 1
}
}
}
matrix3 <- cbind(matrix3, matrix2)
}
matrix3
matrix3$matrix3 <- NULL
colnames(matrix3) <- newd
matrix3
setwd("~/GitHub/workingWithYicheng/workingWithYicheng/phase-I-data/rawData/Normal")
getwd()
matrix4 <- rep(0, 10)
matrix4 <- as.data.frame(matrix4)
newd <- list.files(pattern = ".csv")
for (k in newd){
data <- read.csv(k)
answers8 <- peakfunc(density(data$DNA_Index)$x, density(data$DNA_Index)$y)
answers8
matrix2 <- rep(0, 10)
z1 <- interval[1:10]
z2 <- interval[2:11]
for (i in answers8){
for (j in 1:10){
if (i > z1[j] & i < z2[j]){
matrix2[j] <- matrix2[j] + 1
}
}
}
matrix4 <- cbind(matrix4, matrix2)
}
matrix4
matrix4$matrix4 <- NULL
colnames(matrix4) <- newd
matrix4
matrix(as.numeric(as.matrix(matrix4)), nrow = 10)
jk <- rep(0, 10)
for (i in 1:10){
jk[i] <- sum(matrix(as.numeric(as.matrix(matrix4)), nrow = 10)[i,])
}
jk
jk <- jk/93
jk
names(jk) = c("0.5-1.5", "1.5-2.5", "2.5-3.5", "3.5-4.5", "4.5-5.5",
"5.5-6.5", "6.5-7.5", "7.5-8.5", "8.5-9.5", "9.5-10.5")
barplot(jk, xlab = "intervals", ylab = "avg peaks")
text(labels = round(jk, digits = 2), x = seq(0.7, 12, by = 1.2),
y = rep(1, 10))
OSCCs <- t(matrix3)
OSCCs
OLKs <- t(matrix4)
OLKs
OSCCs <- as.data.frame(OSCCs)
OLKs <- as.data.frame(OLKs)
OSCCs$V11 <- rep("c", 93)
OLKs$V11 <- rep("n", 102)
OSCCs$V11 <- as.character(OSCCs$V11)
combino <- rbind(OSCCs, OLKs)
str(combino)
combino$V11 <- as.factor(combino$V11)
library(caret)
library(pROC)
library(Metrics)
require(compiler)
multiClassSummary <- cmpfun(function (data, lev = NULL, model = NULL)
{
#Load Libraries
require(Metrics)
require(caret)
#Check data
if (!all(levels(data[, "pred"]) == levels(data[, "obs"])))
stop("levels of observed and predicted data do not match")
#Calculate custom one-vs-all stats for each class
prob_stats <- lapply(levels(data[, "pred"]), function(class)
{
#Grab one-vs-all data for the class
pred <- ifelse(data[, "pred"] == class, 1, 0)
obs <- ifelse(data[, "obs"] == class, 1, 0)
prob <- data[,class]
#Calculate one-vs-all AUC and logLoss and return
cap_prob <- pmin(pmax(prob, .000001), .999999)
prob_stats <- c(auc(obs, prob), logLoss(obs, cap_prob))
names(prob_stats) <- c("ROC", "logLoss")
return(prob_stats)
})
prob_stats <- do.call(rbind, prob_stats)
rownames(prob_stats) <- paste( "Class:" , levels(data[, "pred"]))
#Calculate confusion matrix-based statistics
CM <- confusionMatrix(data[, "pred"], data[, "obs"])
#Aggregate and average class-wise stats
#Todo: add weights
class_stats <- cbind(CM$byClass, prob_stats)
class_stats <- colMeans(class_stats)
#Aggregate overall stats
overall_stats <- c(CM$overall)
#Combine overall with class-wise stats and remove some stats we don't want
stats <- c(overall_stats, class_stats)
stats <- stats[! names(stats) %in% c("AccuracyNull","Prevalence", "Detection Prevalence")]
#Clean names and return
names(stats) <- gsub('[[:blank:]] +', '_' , names(stats))
return(stats)
})
library(ROCR)
set.seed(12345)
inTrainingSet <- createDataPartition(combino$V11, p=.7, list=FALSE)
labelTrain <- combino[ inTrainingSet,]
ctrl <- trainControl(method = "repeatedcv",
repeats = 5,
summaryFunction = multiClassSummary,
classProbs = TRUE)
set.seed(1024)
rfFit <- train(V11 ~ ., data = labelTrain,
## training model: svm >>>
method = "ranger",
metric = "ROC",
tuneLength = 10,
trControl = ctrl)
rfPred <- predict(rfFit, labelTest)
classTest <- as.vector(labelTest$V11)
rfProbs <- predict(rfFit, labelTest, type = "prob")
rfProbs
confusionMatrix(rfPred, as.factor(classTest))
setwd("C:/Users/Yicheng/Desktop/fuyue data/CSV/OSCC")
data <- read.csv("00872870.csv")
answers8 <- peakfunc(density(data$DNA_Index)$x, density(data$DNA_Index)$y)
answers8
interval <- c(0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5)
interval
matrix2 <- rep(0, 10)
z1 <- interval[1:10]
z2 <- interval[2:11]
for (i in answers8){
for (j in 1:10){
if (i > z1[j] & i < z2[j]){
matrix2[j] <- matrix2[j] + 1
}
}
}
matrix2 <- as.data.frame(t(matrix2))
matrix2$V11 <- "c"
matrix2$V11 <- as.factor(matrix2$V11)
matrix2 <- rbind(matrix2, matrix2)
rfPred <- predict(rfFit, matrix2)
classTest <- as.vector(matrix2$V11)
rfProbs <- predict(rfFit, matrix2, type = "prob")
rfProbs
matrix2
rfFit
setwd("C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/rforest/data")
rfFit <- 1
rfFit <- readRDS("data/data.Rda")
getwd()
readRDS("data/data.Rda")
readRDS("data.Rda")
predict(rfFit, matrix2, type = "prob")
combino
getwd()
saveRDS(combino, file = "data.Rda")
str(combino)
runApp('C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/rforest')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='yli100',
token='F12CC50A8B3EB34085269F32FA222193',
secret='<SECRET>')
runApp('C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/rforest')
runApp('C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/rforest')
rsconnect::showLogs()
runApp('C:/Users/Yicheng/Desktop/chenresearch/exfoliative cell data 20161230/MotionDetection/rforest')
